// Authentication and user management models

enum Role {
  ADMIN
  USER
}

model User {
  id            String  @id @default(cuid())
  name          String?
  username      String? @unique
  email         String  @unique
  emailVerified Boolean @default(false)
  image         String?

  // For credential-based auth
  hashedPassword String?

  // Authorization & security
  role               Role    @default(USER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorSecret    String?

  // Relations
  accounts Account[]
  sessions Session[]
  profile  Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Portfolio domain models you can manage from an admin panel

model Profile {
  id     String @id @default(cuid())
  userId String @unique

  fullName    String
  headline    String
  bio         String?
  avatarUrl   String?
  location    String?
  phone       String?
  emailPublic String?
  resumeUrl   String?
  linkedinUrl String?
  githubUrl   String?
  websiteUrl  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  skills      Skill[]
  experiences Experience[]
  educations  Education[]
  projects    Project[]
  socialLinks SocialLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        String @id @default(cuid())
  profileId String

  name             String
  label            String?
  icon             String?
  category         String // e.g., Programming Languages, Frameworks, Databases
  level            Int? // 1..5 if you want to rank
  order            Int?    @default(0)
  experienceYears  Int?    @default(0)
  experienceMonths Int?    @default(0)

  profile  Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  projects Project[]

  @@index([profileId])
}

model Experience {
  id        String @id @default(cuid())
  profileId String

  company     String
  role        String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?

  highlights ExperienceHighlight[]

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model ExperienceHighlight {
  id           String @id @default(cuid())
  experienceId String
  text         String

  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@index([experienceId])
}

model Education {
  id        String @id @default(cuid())
  profileId String

  institution String
  degree      String
  field       String?
  startDate   DateTime?
  endDate     DateTime?
  grade       String?

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Project {
  id        String @id @default(cuid())
  profileId String

  title       String
  slug        String    @unique
  description String?
  coverImage  String?
  url         String?
  repoUrl     String?
  startDate   DateTime?
  endDate     DateTime?

  tags   Tag[]
  skills Skill[]

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  projects Project[]
}

model SocialLink {
  id        String @id @default(cuid())
  profileId String

  platform String // e.g., GitHub, LinkedIn
  url      String
  order    Int?   @default(0)

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Feature flags / app-level settings

model FeatureFlag {
  key   String  @id
  // For now we only need boolean; can extend with JSON in future
  value Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Base Prisma configuration
// - SQLite datasource
// - Generated client placed under prisma/generated/client

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
