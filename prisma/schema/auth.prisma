// Authentication and user management models

enum Role {
  ADMIN
  USER
}

model User {
  id                  String   @id @default(cuid())
  name                String?
  username            String?  @unique
  email               String   @unique
  emailVerified       Boolean  @default(false)
  image               String?

  // For credential-based auth
  hashedPassword      String?

  // Authorization & security
  role                Role     @default(USER)
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?

  // Relations
  accounts            Account[]
  sessions            Session[]
  profile             Profile?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("user")
}

model Account {
  id                      String   @id @default(cuid())
  accountId               String
  providerId              String
  userId                  String
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken             String?
  refreshToken            String?
  idToken                 String?
  accessTokenExpiresAt    DateTime?
  refreshTokenExpiresAt   DateTime?
  scope                   String?
  password                String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("account")
}

model Session {
  id         String   @id @default(cuid())
  expiresAt  DateTime
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ipAddress  String?
  userAgent  String?
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
